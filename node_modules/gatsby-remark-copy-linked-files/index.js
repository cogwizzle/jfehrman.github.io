"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var visit = require(`unist-util-visit`);
var isRelativeUrl = require(`is-relative-url`);
var fsExtra = require(`fs-extra`);
var path = require(`path`);
var _ = require(`lodash`);
var cheerio = require(`cheerio`);
var sizeOf = require(`image-size`);

module.exports = function (_ref, pluginOptions) {
  var files = _ref.files,
      markdownNode = _ref.markdownNode,
      markdownAST = _ref.markdownAST,
      getNode = _ref.getNode;

  var defaults = {
    ignoreFileExtensions: [`png`, `jpg`, `jpeg`, `bmp`, `tiff`]
  };

  var options = _.defaults(pluginOptions, defaults);

  var filesToCopy = new Map();
  // Copy linked files to the public directory and modify the AST to point to
  // new location of the files.
  var visitor = function visitor(link) {
    if (isRelativeUrl(link.url) && getNode(markdownNode.parent).internal.type === `File`) {
      var linkPath = path.posix.join(getNode(markdownNode.parent).dir, link.url);
      var linkNode = _.find(files, function (file) {
        if (file && file.absolutePath) {
          return file.absolutePath === linkPath;
        }
        return null;
      });
      if (linkNode && linkNode.absolutePath) {
        var newPath = path.posix.join(process.cwd(), `public`, `${linkNode.internal.contentDigest}.${linkNode.extension}`);

        // Prevent uneeded copying
        if (linkPath === newPath) {
          return;
        }

        var relativePath = path.posix.join(`/${linkNode.internal.contentDigest}.${linkNode.extension}`);
        link.url = `${relativePath}`;

        filesToCopy.set(linkPath, newPath);
      }
    }
  };

  // Takes a node and generates the needed images and then returns
  // the needed HTML replacement for the image
  var generateImagesAndUpdateNode = function generateImagesAndUpdateNode(image) {
    var imagePath = path.posix.join(getNode(markdownNode.parent).dir, image.attr(`src`));
    var imageNode = _.find(files, function (file) {
      if (file && file.absolutePath) {
        return file.absolutePath === imagePath;
      }
      return null;
    });
    if (!imageNode || !imageNode.absolutePath) {
      return;
    }

    var initialImageSrc = image.attr(`src`);
    // The link object will be modified to the new location so we'll
    // use that data to update our ref
    var link = { url: image.attr(`src`) };
    visitor(link);
    image.attr(`src`, link.url);

    var dimensions = void 0;

    if (!image.attr(`width`) || !image.attr(`height`)) {
      dimensions = sizeOf(imageNode.absolutePath);
    }

    // Generate default alt tag
    var srcSplit = initialImageSrc.split(`/`);
    var fileName = srcSplit[srcSplit.length - 1];
    var fileNameNoExt = fileName.replace(/\.[^/.]+$/, ``);
    var defaultAlt = fileNameNoExt.replace(/[^A-Z0-9]/gi, ` `);

    image.attr(`alt`, image.attr(`alt`) ? image.attr(`alt`) : defaultAlt);
    image.attr(`width`, image.attr(`width`) ? image.attr(`width`) : dimensions.width);
    image.attr(`height`, image.attr(`height`) ? image.attr(`height`) : dimensions.height);
  };

  visit(markdownAST, `link`, function (link) {
    var ext = link.url.split(`.`).pop();
    if (options.ignoreFileExtensions.includes(ext)) {
      return;
    }

    visitor(link);
  });

  // This will only work for markdown img tags
  visit(markdownAST, `image`, function (image) {
    var ext = image.url.split(`.`).pop();
    if (options.ignoreFileExtensions.includes(ext)) {
      return;
    }

    var imagePath = path.posix.join(getNode(markdownNode.parent).dir, image.url);
    var imageNode = _.find(files, function (file) {
      if (file && file.absolutePath) {
        return file.absolutePath === imagePath;
      }
      return false;
    });

    if (imageNode) {
      visitor(image);
    }
  });

  // For each HTML Node
  visit(markdownAST, `html`, function (node) {
    var $ = cheerio.load(node.value);
    // Handle Images
    var imageRefs = [];
    $(`img`).each(function () {
      try {
        if (isRelativeUrl($(this).attr(`src`))) {
          imageRefs.push($(this));
        }
      } catch (err) {
        // Ignore
      }
    });

    for (var _iterator = imageRefs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref2 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref2 = _i.value;
      }

      var thisImg = _ref2;

      try {
        var ext = thisImg.attr(`src`).split(`.`).pop();
        if (options.ignoreFileExtensions.includes(ext)) {
          return;
        }

        generateImagesAndUpdateNode(thisImg);
      } catch (err) {
        // Ignore
      }
    }

    var videoRefs = [];
    // Handle video tags.
    $(`video source`).each(function () {
      try {
        if (isRelativeUrl($(this).attr(`src`))) {
          videoRefs.push($(this));
        }
      } catch (err) {
        // Ignore
      }
    });

    for (var _iterator2 = videoRefs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref3 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref3 = _i2.value;
      }

      var thisVideo = _ref3;

      try {
        var _ext = thisVideo.attr(`src`).split(`.`).pop();
        if (options.ignoreFileExtensions.includes(_ext)) {
          return;
        }

        // The link object will be modified to the new location so we'll
        // use that data to update our ref
        var link = { url: thisVideo.attr(`src`) };
        visitor(link);
        thisVideo.attr(`src`, link.url);
      } catch (err) {
        // Ignore
      }
    }

    // Handle a tags.
    var aRefs = [];
    $(`a`).each(function () {
      try {
        if (isRelativeUrl($(this).attr(`href`))) {
          aRefs.push($(this));
        }
      } catch (err) {
        // Ignore
      }
    });

    for (var _iterator3 = aRefs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref4 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref4 = _i3.value;
      }

      var thisATag = _ref4;

      try {
        var _ext2 = thisATag.attr(`href`).split(`.`).pop();
        if (options.ignoreFileExtensions.includes(_ext2)) {
          return;
        }

        // The link object will be modified to the new location so we'll
        // use that data to update our ref
        var _link = { url: thisATag.attr(`href`) };
        visitor(_link);
        thisATag.attr(`href`, _link.url);
      } catch (err) {
        // Ignore
      }
    }

    // Replace the image node with an inline HTML node.
    node.type = `html`;
    node.value = $(`body`).html(); // fix for cheerio v1
    return;
  });

  return Promise.all(Array.from(filesToCopy, function () {
    var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref5) {
      var linkPath = _ref5[0],
          newPath = _ref5[1];
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (fsExtra.existsSync(newPath)) {
                _context.next = 9;
                break;
              }

              _context.prev = 1;
              _context.next = 4;
              return fsExtra.copy(linkPath, newPath);

            case 4:
              _context.next = 9;
              break;

            case 6:
              _context.prev = 6;
              _context.t0 = _context["catch"](1);

              console.error(`error copying file`, _context.t0);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, undefined, [[1, 6]]);
    }));

    return function (_x) {
      return _ref6.apply(this, arguments);
    };
  }()));
};